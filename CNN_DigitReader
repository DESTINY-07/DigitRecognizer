{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1z2DqAdnkogoIm0Bo-Hw2yQDMtGfXf38L","authorship_tag":"ABX9TyOOyMv1lmIe30YIjm3FVB8P"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Welcome to the Start of DigitReader Network"],"metadata":{"id":"S0QITiTLNKZ3"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"jHPNUfZljvPj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728070075862,"user_tz":-330,"elapsed":15914,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"c1308a13-f236-461e-efd2-5b294ee009b8"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# IMPORT SECTION\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"metadata":{"id":"5ZjlmalwNkqT","executionInfo":{"status":"ok","timestamp":1728071077943,"user_tz":-330,"elapsed":489,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/CNN_DigitReader/Dataset/digit-recognizer/train.csv\")"],"metadata":{"id":"FyW8wEWKjyaJ","executionInfo":{"status":"ok","timestamp":1728070080077,"user_tz":-330,"elapsed":4219,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"id":"IrigsYY4VoOb","executionInfo":{"status":"ok","timestamp":1728070080079,"user_tz":-330,"elapsed":14,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"0fd6a116-7600-4219-b482-8469a8af8430","colab":{"base_uri":"https://localhost:8080/","height":443}},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n","0          1       0       0       0       0       0       0       0       0   \n","1          0       0       0       0       0       0       0       0       0   \n","2          1       0       0       0       0       0       0       0       0   \n","3          4       0       0       0       0       0       0       0       0   \n","4          0       0       0       0       0       0       0       0       0   \n","...      ...     ...     ...     ...     ...     ...     ...     ...     ...   \n","41995      0       0       0       0       0       0       0       0       0   \n","41996      1       0       0       0       0       0       0       0       0   \n","41997      7       0       0       0       0       0       0       0       0   \n","41998      6       0       0       0       0       0       0       0       0   \n","41999      9       0       0       0       0       0       0       0       0   \n","\n","       pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n","0           0  ...         0         0         0         0         0   \n","1           0  ...         0         0         0         0         0   \n","2           0  ...         0         0         0         0         0   \n","3           0  ...         0         0         0         0         0   \n","4           0  ...         0         0         0         0         0   \n","...       ...  ...       ...       ...       ...       ...       ...   \n","41995       0  ...         0         0         0         0         0   \n","41996       0  ...         0         0         0         0         0   \n","41997       0  ...         0         0         0         0         0   \n","41998       0  ...         0         0         0         0         0   \n","41999       0  ...         0         0         0         0         0   \n","\n","       pixel779  pixel780  pixel781  pixel782  pixel783  \n","0             0         0         0         0         0  \n","1             0         0         0         0         0  \n","2             0         0         0         0         0  \n","3             0         0         0         0         0  \n","4             0         0         0         0         0  \n","...         ...       ...       ...       ...       ...  \n","41995         0         0         0         0         0  \n","41996         0         0         0         0         0  \n","41997         0         0         0         0         0  \n","41998         0         0         0         0         0  \n","41999         0         0         0         0         0  \n","\n","[42000 rows x 785 columns]"],"text/html":["\n","  <div id=\"df-145b756d-81aa-4c2f-898e-fd4421ff669d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>pixel0</th>\n","      <th>pixel1</th>\n","      <th>pixel2</th>\n","      <th>pixel3</th>\n","      <th>pixel4</th>\n","      <th>pixel5</th>\n","      <th>pixel6</th>\n","      <th>pixel7</th>\n","      <th>pixel8</th>\n","      <th>...</th>\n","      <th>pixel774</th>\n","      <th>pixel775</th>\n","      <th>pixel776</th>\n","      <th>pixel777</th>\n","      <th>pixel778</th>\n","      <th>pixel779</th>\n","      <th>pixel780</th>\n","      <th>pixel781</th>\n","      <th>pixel782</th>\n","      <th>pixel783</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>41995</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41996</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41997</th>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41998</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41999</th>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>42000 rows × 785 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-145b756d-81aa-4c2f-898e-fd4421ff669d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-145b756d-81aa-4c2f-898e-fd4421ff669d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-145b756d-81aa-4c2f-898e-fd4421ff669d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dd765186-d0c0-4e73-b31d-ca4a810f4d1d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd765186-d0c0-4e73-b31d-ca4a810f4d1d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dd765186-d0c0-4e73-b31d-ca4a810f4d1d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_eabf59bf-0f39-4e3d-93e2-d0fffae6e05a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_eabf59bf-0f39-4e3d-93e2-d0fffae6e05a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["df.label.unique(), df.label.count() # (9 Unique classes)  # (42k total sample)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i1yIrZyzs8tV","executionInfo":{"status":"ok","timestamp":1728070080079,"user_tz":-330,"elapsed":11,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"cc96df80-e392-4875-a04a-801d3c47f653"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([1, 0, 4, 7, 3, 5, 8, 9, 2, 6]), 42000)"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["df.head()\n","df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qTXIukHokSEK","executionInfo":{"status":"ok","timestamp":1728070080080,"user_tz":-330,"elapsed":10,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"1aa50f44-1361-4722-ad3d-eea1d42980af"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(42000, 785)"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","source":["#### Pre-Processing"],"metadata":{"id":"gc9zb7zFpdym"}},{"cell_type":"code","source":["df_array = np.array(df)\n","m, n = df_array.shape\n","np.random.shuffle(df_array) # shuffle before splitting into dev and training sets\n","\n","# Validation\n","data_val = df_array[0:1000].T\n","Y_val = data_val[0]\n","X_val = data_val[1:n]\n","# Validation Normalizing\n","X_val = X_val / 255.\n","\n","# Training\n","data_train = df_array[1000:m].T\n","Y_train = data_train[0]\n","X_train = data_train[1:n]\n","# Training Normalizing\n","X_train = X_train / 255.\n","\n","X_val.shape, X_train.shape, Y_val.shape # WE have a shape of Validation set ((784, 1000)) and Training set ((784, 41000)) [Columns x Rows format]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PR4OvIaeF-ZZ","executionInfo":{"status":"ok","timestamp":1728071604179,"user_tz":-330,"elapsed":1504,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"2433670f-9827-4c46-94e0-bd4310bfc045"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((784, 1000), (784, 41000), (1000,))"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["m, n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yM0nWACCo3NX","executionInfo":{"status":"ok","timestamp":1728070082942,"user_tz":-330,"elapsed":8,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"9c4ff2ad-478b-49ba-c277-070964b5d57a"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(42000, 785)"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["X_train, Y_train\n","X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0cw9EubVXJ01","executionInfo":{"status":"ok","timestamp":1728070082942,"user_tz":-330,"elapsed":6,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"5f1014a1-24f8-46ce-9281-65fea8ca1904"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(784, 41000)"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["##### We have 41000 images for train, and 1000 images for validation - So we also have 41000 true label (one label for one image) in the train set, as well as 1000 labels in the validation"],"metadata":{"id":"jdwjxkvEY0CU"}},{"cell_type":"code","source":["np.random.seed(42)\n","\n","def init_params():\n","    W1 = np.random.rand(10, 784) - 0.5\n","    b1 = np.random.rand(10, 1) - 0.5\n","    W2 = np.random.rand(10, 10) - 0.5\n","    b2 = np.random.rand(10, 1) - 0.5\n","    return W1, b1, W2, b2\n","\n","    # w1 = np.array(w1)\n","    # w2=  np.array(w2)\n","    # b1 = np.array(b1).reshape(-1, 1)  # Adjust if necessary\n","    # b2 = np.array(b2).reshape(-1, 1)\n","\n","    return w1, b1, w2, b2\n","\n","def ReLU(z):                           # (defining Relu activation method)\n","  return np.maximum(0,z)\n","\n","def softmax(z):                        # (Defining softmax activation for output layer)\n","  a = np.exp(z) / sum(np.exp(z))\n","  return a\n","\n","def forward_prop( w1, b1, w2, b2, z):  # (defining forward propagation (form input layer))\n","  L1 = w1.dot(z) + b1\n","  AL1 = ReLU(L1)\n","  L2 = w2.dot(AL1) + b2\n","  AL2 = softmax(L2)\n","  return L1, AL1, L2, AL2\n","\n","def ReLU_deriv(Z):                      # (calculating activation function derivative )\n","    return Z > 0\n","\n","def one_hot(Y):                         # (numerically encoding the predicted layer output )\n","    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n","    one_hot_Y[np.arange(Y.size), Y] = 1\n","    one_hot_Y = one_hot_Y.T\n","    return one_hot_Y\n","\n","def backward_prop(L1, AL1, L2, AL2, W1, W2, X, Y):   # (backpropagating from the output layer, so that we can the best updated weights and biases)\n","    one_hot_Y = one_hot(Y)\n","    dZ2 = AL2 - one_hot_Y\n","    dW2 = 1 / m * dZ2.dot(AL1.T)\n","    db2 = 1 / m * np.sum(dZ2)\n","    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(L1)\n","    dW1 = 1 / m * dZ1.dot(X.T)\n","    db1 = 1 / m * np.sum(dZ1)\n","    return dW1, db1, dW2, db2\n","\n","def update_params(w1, b1, w2, b2, dw1, db1, dw2, db2, alpha):  # (Finally updating our updated weights and biases, and storing it)\n","    w1 = w1 - alpha * dw1\n","    b1 = b1 - alpha * db1\n","    w2 = w2 - alpha * dw2\n","    b2 = b2 - alpha * db2\n","    return w1, b1, w2, b2"],"metadata":{"id":"-7YuNMin1LYE","executionInfo":{"status":"ok","timestamp":1728071108192,"user_tz":-330,"elapsed":451,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["def get_predictions (A2):\n","  return np.argmax(A2, 0)\n","\n","def get_accuracy(prediction, y):\n","  print(prediction, y)\n","  return np.sum(prediction == y) / y.size\n","\n","def gradient_descent(x, y, alpha , iteration):\n","  W1, b1, W2, b2 = init_params()\n","  for i in range (iteration):\n","    Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, x)\n","    dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, x, y)\n","    W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n","    if i % 50 == 0:\n","            print(\"Iteration: \", i)\n","            predictions = get_predictions(A2)\n","            print(get_accuracy(predictions, y))\n","  return W1, b1, W2, b2"],"metadata":{"id":"8qhmTUS4qEFZ","executionInfo":{"status":"ok","timestamp":1728071132898,"user_tz":-330,"elapsed":469,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}}},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":["## Training"],"metadata":{"id":"luyiEq4Vpler"}},{"cell_type":"code","source":["W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 1000)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rL5yCIyXIwhO","executionInfo":{"status":"ok","timestamp":1728070838008,"user_tz":-330,"elapsed":213675,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"51932a7a-e8bd-48cc-89aa-b44aaefba663"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Iteration:  0\n","[7 3 9 ... 3 9 7] [6 4 4 ... 7 2 3]\n","0.08124390243902439\n","Iteration:  50\n","[0 3 9 ... 6 2 3] [6 4 4 ... 7 2 3]\n","0.38009756097560976\n","Iteration:  100\n","[0 3 9 ... 4 6 3] [6 4 4 ... 7 2 3]\n","0.6329756097560976\n","Iteration:  150\n","[0 9 9 ... 0 2 3] [6 4 4 ... 7 2 3]\n","0.7222926829268292\n","Iteration:  200\n","[0 9 9 ... 0 2 3] [6 4 4 ... 7 2 3]\n","0.7669756097560976\n","Iteration:  250\n","[0 9 4 ... 0 2 3] [6 4 4 ... 7 2 3]\n","0.7955853658536586\n","Iteration:  300\n","[0 9 4 ... 0 2 3] [6 4 4 ... 7 2 3]\n","0.8150731707317073\n","Iteration:  350\n","[0 9 4 ... 0 2 3] [6 4 4 ... 7 2 3]\n","0.8288536585365853\n","Iteration:  400\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8396585365853658\n","Iteration:  450\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8478536585365853\n","Iteration:  500\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8540487804878049\n","Iteration:  550\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8596585365853658\n","Iteration:  600\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8641463414634146\n","Iteration:  650\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8687073170731707\n","Iteration:  700\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8718292682926829\n","Iteration:  750\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.874780487804878\n","Iteration:  800\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8769268292682927\n","Iteration:  850\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8795609756097561\n","Iteration:  900\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8815609756097561\n","Iteration:  950\n","[0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","0.8836585365853659\n"]}]},{"cell_type":"code","source":["# Iteration:  950\n","# [0 9 4 ... 7 2 3] [6 4 4 ... 7 2 3]\n","# 0.8836585365853659\n","\n","# (Finally after 1000 iterations we getting a accuracy score of 88 percent)"],"metadata":{"id":"rtoetWMMKSuM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def make_predictions(X, W1, b1, W2, b2):\n","    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n","    predictions = get_predictions(A2)\n","    return predictions\n","\n","def test_prediction(index, W1, b1, W2, b2):\n","    current_image = X_train[:, index, None]\n","    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n","    label = Y_train[index]\n","    print(\"Prediction: \", prediction)\n","    print(\"Label: \", label)\n","\n","    current_image = current_image.reshape((28, 28)) * 255\n","    plt.gray()\n","    plt.imshow(current_image, interpolation='nearest')\n","    plt.show()"],"metadata":{"id":"ZiF2GJRxD6aT","executionInfo":{"status":"ok","timestamp":1728071083720,"user_tz":-330,"elapsed":492,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["test_prediction(7, W1, b1, W2, b2)\n","test_prediction(0, W1, b1, W2, b2)\n","test_prediction(2, W1, b1, W2, b2)\n","test_prediction(6, W1, b1, W2, b2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ESchaZU3ECHb","executionInfo":{"status":"ok","timestamp":1728071259295,"user_tz":-330,"elapsed":1594,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"6a15e460-49cf-4017-80e6-5204c4ec4995"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Prediction:  [3]\n","Label:  3\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Prediction:  [0]\n","Label:  6\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAaAAAAGdCAYAAABU0qcqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAcGUlEQVR4nO3df2xV9f3H8dctPy4/bG9XSnt75YcFFIz82IZSG5XhaGjrRgDJ5q9luDkJrpgJE5c6Fd0Pq5ioYWG4JQvgJqhkAtEsLFpsiVvBgBJG5jqK3SiDFmXpvaVIwfbz/YOvd1xpwXO5t+/by/ORfJLec867583hpK+ee04/1+eccwIAoJdlWDcAALg0EUAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAw0d+6gc/r6urS4cOHlZmZKZ/PZ90OAMAj55za2toUCoWUkdHzdU7KBdDhw4c1cuRI6zYAABepqalJI0aM6HF9yr0Fl5mZad0CACABLvTzPGkBtGrVKl1xxRUaNGiQioqK9O67736hOt52A4D0cKGf50kJoFdeeUVLly7V8uXL9d5772nKlCkqLS3V0aNHk7E7AEBf5JJg2rRprqKiIvq6s7PThUIhV1VVdcHacDjsJDEYDAajj49wOHzen/cJvwI6deqUdu/erZKSkuiyjIwMlZSUqK6u7pztOzo6FIlEYgYAIP0lPIA+/vhjdXZ2Kj8/P2Z5fn6+mpubz9m+qqpKgUAgOngCDgAuDeZPwVVWViocDkdHU1OTdUsAgF6Q8L8Dys3NVb9+/dTS0hKzvKWlRcFg8Jzt/X6//H5/otsAAKS4hF8BDRw4UFOnTlV1dXV0WVdXl6qrq1VcXJzo3QEA+qikzISwdOlSLViwQNdee62mTZum559/Xu3t7fre976XjN0BAPqgpATQbbfdpo8++kiPPfaYmpub9eUvf1lbt24958EEAMCly+ecc9ZNnC0SiSgQCFi3AQC4SOFwWFlZWT2uN38KDgBwaSKAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAm+ls3AOCLycjw/vvi7Nmz49pXPHUzZ870XBMMBj3XPPjgg55rVq1a5bkGyccVEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABNMRgqcJZ4JPydPnuy55uGHH/Zcc/XVV3uumThxoueaVDdjxgzPNUxGmpq4AgIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCyUiBszzxxBOeax555JEkdJIYH3zwQVx1zc3Nnmuqq6s913z44Yeea7Zv3+65BqmJKyAAgAkCCABgIuEB9Pjjj8vn88WMCRMmJHo3AIA+Lin3gK655hq99dZb/9tJf241AQBiJSUZ+vfvr2AwmIxvDQBIE0m5B7R//36FQiGNGTNGd911lw4ePNjjth0dHYpEIjEDAJD+Eh5ARUVFWrt2rbZu3arVq1ersbFRN910k9ra2rrdvqqqSoFAIDpGjhyZ6JYAACko4QFUXl6ub33rW5o8ebJKS0v1pz/9Sa2trXr11Ve73b6yslLhcDg6mpqaEt0SACAFJf3pgOzsbF111VVqaGjodr3f75ff7092GwCAFJP0vwM6fvy4Dhw4oIKCgmTvCgDQhyQ8gB588EHV1tbqX//6l/76179q3rx56tevn+64445E7woA0Icl/C24Q4cO6Y477tCxY8c0fPhw3XjjjdqxY4eGDx+e6F0BAPown3POWTdxtkgkokAgYN0G+rjKysq46n75y196rvH5fJ5r6uvrPdc8+eSTnms2bdrkuUZSj0+tAl6Ew2FlZWX1uJ654AAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJhI+gfSARdr3rx5nmuWLFkS177imVh03bp1nmu+//3ve67p6uryXAOkMq6AAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmmA0bvWr8+PGea1588UXPNZdddpnnGklatmyZ55qVK1d6rmFma4ArIACAEQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACaYjBRx8/v9nmueeuopzzXxTCy6bt06zzWS9Pzzz3uu+fTTT+PaF3Cp4woIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACSYjhYYOHRpX3be//W3PNXPnzvVc88orr3iuefzxxz3XSEwsCvQmroAAACYIIACACc8BtH37ds2ePVuhUEg+n0+bN2+OWe+c02OPPaaCggINHjxYJSUl2r9/f6L6BQCkCc8B1N7erilTpmjVqlXdrl+xYoVWrlypF154QTt37tTQoUNVWlqqkydPXnSzAID04fkhhPLycpWXl3e7zjmn559/Xo888ojmzJkjSXrxxReVn5+vzZs36/bbb7+4bgEAaSOh94AaGxvV3NyskpKS6LJAIKCioiLV1dV1W9PR0aFIJBIzAADpL6EB1NzcLEnKz8+PWZ6fnx9d93lVVVUKBALRMXLkyES2BABIUeZPwVVWViocDkdHU1OTdUsAgF6Q0AAKBoOSpJaWlpjlLS0t0XWf5/f7lZWVFTMAAOkvoQFUWFioYDCo6urq6LJIJKKdO3equLg4kbsCAPRxnp+CO378uBoaGqKvGxsbtWfPHuXk5GjUqFF64IEH9Itf/EJXXnmlCgsL9eijjyoUCsU1BQsAIH15DqBdu3bp5ptvjr5eunSpJGnBggVau3atHnroIbW3t2vhwoVqbW3VjTfeqK1bt2rQoEGJ6xoA0Of5nHPOuomzRSIRBQIB6zYuKWf/QuHFtm3bPNccOnTIc82kSZM817S2tnquAZBY4XD4vPf1zZ+CAwBcmgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJjx/HANSW0aG998pli1bFte+Ojs7Pdd897vf9VzDzNZAeuIKCABgggACAJgggAAAJgggAIAJAggAYIIAAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkmI00zd955p+ea8vLyuPZ19OhRzzVvv/12XPtC6rviiis81/z0pz/1XDN16lTPNb3p2Wef9Vyzfv16zzVdXV2ea1INV0AAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMMBlpmrnmmmt6bV8LFizotX2hd11//fWea15++WXPNaNHj/Zck+p+//vfe67Zv3+/55qdO3d6rkk1XAEBAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwwWSkaeab3/xmr+0rngkUET+fz+e5ZuHChXHta+XKlZ5rMjK8/z5bU1PjueaPf/yj55q33nrLc40kzZs3z3PNk08+Gde+LkVcAQEATBBAAAATngNo+/btmj17tkKhkHw+nzZv3hyz/u6775bP54sZZWVlieoXAJAmPAdQe3u7pkyZolWrVvW4TVlZmY4cORIdGzZsuKgmAQDpx/NDCOXl5SovLz/vNn6/X8FgMO6mAADpLyn3gGpqapSXl6fx48frvvvu07Fjx3rctqOjQ5FIJGYAANJfwgOorKxML774oqqrq/X000+rtrZW5eXl6uzs7Hb7qqoqBQKB6Bg5cmSiWwIApKCE/x3Q7bffHv160qRJmjx5ssaOHauamhrNnDnznO0rKyu1dOnS6OtIJEIIAcAlIOmPYY8ZM0a5ublqaGjodr3f71dWVlbMAACkv6QH0KFDh3Ts2DEVFBQke1cAgD7E81twx48fj7maaWxs1J49e5STk6OcnBw98cQTmj9/voLBoA4cOKCHHnpI48aNU2lpaUIbBwD0bZ4DaNeuXbr55pujrz+7f7NgwQKtXr1ae/fu1bp169Ta2qpQKKRZs2bp5z//ufx+f+K6BgD0eZ4DaMaMGXLO9bj+z3/+80U1hP/Jzs72XJOZmZn4RpASBgwY4LnmhRdeiGtfn376qeeaH/zgB55r1q1b57kmHvH+XeKSJUsS3AnOxlxwAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATCf9IbiROPDNbDxkyJAmdIBWc/XH3yVZRUeG5prdmth40aJDnmvLy8rj2NXz4cM8177zzjueaPXv2eK5JB1wBAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMAEAQQAMMFkpCmsqanJc01LS4vnmngmXJSkWbNmea5ZvXp1XPuCNHTo0F7bl8/n65X9TJgwwXNNVVWV55q5c+d6rpGkQ4cOea4pKSnxXNPR0eG5Jh1wBQQAMEEAAQBMEEAAABMEEADABAEEADBBAAEATBBAAAATBBAAwAQBBAAwQQABAEwQQAAAEwQQAMCEzznnrJs4WyQSUSAQsG6jz3rooYc81zz99NNx7au5udlzzbhx4zzXtLe3e65JR9dee63nmi1btsS1r4KCAs81//3vfz3XDBkyxHPN4MGDPde88847nmsk6ZZbbvFc09bWFte+0lE4HFZWVlaP67kCAgCYIIAAACYIIACACQIIAGCCAAIAmCCAAAAmCCAAgAkCCABgggACAJgggAAAJgggAIAJAggAYKK/dQNIrI6Ojl7bVzAY9FyzceNGzzXxTLC6b98+zzW9KScnx3PNnDlzPNe0tLR4rpGkUCjkuWbYsGGea+L5f3rmmWc812zYsMFzjSSdPn06rjp8MVwBAQBMEEAAABOeAqiqqkrXXXedMjMzlZeXp7lz56q+vj5mm5MnT6qiokLDhg3TZZddpvnz58f9NgAAIH15CqDa2lpVVFRox44devPNN3X69GnNmjUr5gPDlixZotdff10bN25UbW2tDh8+rFtvvTXhjQMA+jZPDyFs3bo15vXatWuVl5en3bt3a/r06QqHw/rd736n9evX6+tf/7okac2aNbr66qu1Y8cOXX/99YnrHADQp13UPaBwOCzpf0/07N69W6dPn1ZJSUl0mwkTJmjUqFGqq6vr9nt0dHQoEonEDABA+os7gLq6uvTAAw/ohhtu0MSJEyVJzc3NGjhwoLKzs2O2zc/PV3Nzc7ffp6qqSoFAIDpGjhwZb0sAgD4k7gCqqKjQvn379PLLL19UA5WVlQqHw9HR1NR0Ud8PANA3xPWHqIsXL9Ybb7yh7du3a8SIEdHlwWBQp06dUmtra8xVUEtLS49/tOj3++X3++NpAwDQh3m6AnLOafHixdq0aZO2bdumwsLCmPVTp07VgAEDVF1dHV1WX1+vgwcPqri4ODEdAwDSgqcroIqKCq1fv15btmxRZmZm9L5OIBDQ4MGDFQgEdM8992jp0qXKyclRVlaW7r//fhUXF/MEHAAghqcAWr16tSRpxowZMcvXrFmju+++W5L03HPPKSMjQ/Pnz1dHR4dKS0v161//OiHNAgDSh88556ybOFskElEgELBuo8/q39/7bb3FixfHta/nnnsurjqvPv30U881qT6JZEaG9+d/4rlXeujQIc81kvTb3/7Wc81rr73mueaf//yn55pU/7/F/4TDYWVlZfW4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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Prediction:  [4]\n","Label:  4\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Prediction:  [0]\n","Label:  0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["valid_predictions = make_predictions(X_val, W1, b1, W2, b2)\n","get_accuracy(valid_predictions, Y_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Rd76OPpEEHV","executionInfo":{"status":"ok","timestamp":1728071692796,"user_tz":-330,"elapsed":5,"user":{"displayName":"Againdiganta Das","userId":"08274899501847976403"}},"outputId":"bc53b9fd-62c1-4717-c6f3-255e4fc227e0"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["[6 0 8 4 1 3 7 2 5 6 1 4 4 2 9 2 9 2 4 2 3 4 1 5 1 9 9 6 0 7 8 4 2 4 9 2 5\n"," 3 2 3 3 7 0 8 7 5 9 3 7 0 0 8 8 0 0 6 2 7 3 8 0 4 2 9 4 5 0 6 8 4 3 2 2 7\n"," 7 3 3 0 9 2 9 3 3 0 2 9 9 4 7 4 7 8 0 4 2 0 4 0 8 0 6 5 8 3 3 4 2 2 6 6 4\n"," 3 0 3 6 7 5 7 4 1 4 5 6 2 8 1 1 9 2 1 8 2 9 7 6 2 1 3 3 0 7 5 4 8 5 1 9 7\n"," 6 4 2 7 1 2 6 5 5 3 0 9 0 1 1 2 1 6 2 8 6 6 8 8 1 9 6 6 7 0 7 2 6 4 0 0 8\n"," 4 5 4 0 5 7 6 1 6 6 3 1 4 1 8 8 6 1 7 2 1 6 0 3 2 4 6 3 4 8 2 7 8 7 8 4 1\n"," 2 1 8 3 5 8 9 6 7 1 7 2 6 7 4 6 6 9 2 4 7 0 7 7 3 0 2 1 7 3 0 3 9 9 9 3 5\n"," 1 5 1 1 4 2 3 4 7 7 7 9 2 2 9 5 1 0 6 1 7 5 9 8 3 7 4 3 3 9 1 9 1 7 3 4 4\n"," 7 1 4 1 6 8 7 3 9 7 8 6 3 9 8 4 2 8 8 4 8 6 9 4 6 3 4 0 5 0 9 6 7 0 4 3 6\n"," 6 4 2 1 6 7 2 9 2 9 6 7 2 0 0 4 8 4 6 1 4 6 3 2 4 0 5 8 2 8 8 9 9 3 9 6 0\n"," 8 1 9 4 4 5 4 1 6 7 8 6 4 3 2 4 7 1 8 7 4 4 1 4 7 8 4 6 4 2 3 2 6 1 4 0 2\n"," 1 1 8 8 8 5 1 1 8 8 2 9 7 0 1 6 8 9 8 7 8 7 7 6 4 1 1 6 8 7 6 2 0 3 3 8 5\n"," 2 4 4 2 3 2 8 7 3 1 0 1 3 7 2 2 9 2 3 8 3 8 5 0 2 3 9 5 2 1 5 5 6 0 0 7 0\n"," 7 3 2 1 6 9 7 3 0 0 8 8 7 1 6 9 4 9 8 9 7 9 9 1 4 0 4 6 8 0 1 5 4 7 9 6 2\n"," 9 4 9 7 7 7 8 6 9 1 9 2 9 2 7 0 0 9 9 4 4 2 3 5 0 7 8 2 7 7 8 7 3 1 3 3 3\n"," 9 1 3 1 8 8 4 5 7 4 2 3 6 6 3 6 3 5 2 1 2 6 2 4 1 0 7 2 6 6 0 5 3 8 7 6 0\n"," 9 7 5 1 2 8 9 5 0 5 1 5 7 7 2 4 3 8 7 7 2 6 4 0 0 5 9 4 3 3 0 5 1 2 8 8 4\n"," 1 7 5 4 7 6 3 5 6 8 7 3 0 7 2 2 0 1 5 3 8 8 8 8 3 3 6 6 9 5 8 6 0 5 8 9 2\n"," 6 6 5 5 0 6 9 8 6 7 3 5 9 2 1 1 3 2 8 8 7 4 1 7 5 9 7 4 3 5 3 4 2 7 7 6 2\n"," 1 1 1 4 2 9 2 8 6 6 1 1 8 2 3 2 3 2 4 4 0 0 6 6 3 8 9 6 5 2 5 7 6 2 4 7 6\n"," 9 1 2 8 2 1 2 3 1 2 1 6 6 1 9 0 6 8 7 3 5 5 1 1 6 9 4 0 1 4 4 7 5 2 6 8 4\n"," 5 0 9 1 8 3 5 5 7 3 9 0 2 9 1 0 1 9 7 4 6 5 3 2 3 6 4 9 6 3 7 2 7 5 0 1 2\n"," 0 7 3 3 0 7 6 4 5 7 4 3 0 3 8 9 4 2 6 3 0 5 2 8 5 2 5 0 0 6 5 4 7 6 2 8 2\n"," 6 1 2 4 0 6 9 9 3 2 3 3 3 6 1 8 0 2 3 3 8 7 3 4 1 6 6 5 6 5 6 9 7 7 3 1 0\n"," 7 8 1 9 0 4 6 6 7 9 2 5 8 3 5 9 3 1 7 8 9 7 0 0 6 7 6 7 6 6 3 7 0 7 4 8 7\n"," 0 9 0 8 7 9 2 3 5 9 9 7 8 9 6 0 0 6 5 0 4 7 2 0 4 3 0 2 3 2 5 5 5 0 0 8 3\n"," 1 8 9 8 6 5 9 4 1 5 6 1 7 7 3 5 6 4 2 3 2 1 5 3 3 9 5 3 8 6 5 5 6 7 9 0 1\n"," 8] [6 0 8 4 1 1 3 7 5 6 1 4 4 2 9 2 9 2 4 2 3 4 1 8 1 9 9 6 0 7 8 4 4 9 9 2 5\n"," 3 2 3 3 7 0 8 7 5 9 8 7 0 5 8 8 6 0 6 2 7 3 8 0 4 2 9 5 5 0 6 8 4 3 1 2 7\n"," 7 3 3 0 9 2 9 3 3 0 2 9 4 4 7 4 7 5 0 4 2 0 4 0 8 0 6 5 8 3 3 4 2 2 6 6 4\n"," 5 0 3 4 3 5 7 4 1 4 5 6 2 8 1 1 9 2 1 8 2 9 7 6 2 1 3 3 0 7 8 4 8 5 1 9 9\n"," 6 4 2 7 1 2 6 5 5 3 0 9 0 1 1 2 8 6 2 8 6 6 8 5 1 9 6 6 7 0 7 2 6 4 0 0 5\n"," 4 5 4 0 5 7 2 2 6 6 3 1 4 1 8 8 6 1 7 2 1 6 0 3 2 4 6 3 4 8 3 7 9 7 8 9 1\n"," 2 1 8 3 5 5 9 8 7 1 7 2 6 7 4 6 3 9 2 4 9 0 7 7 3 0 2 1 3 0 0 3 7 9 9 3 5\n"," 2 5 1 1 4 2 3 4 7 7 7 9 2 2 9 5 1 0 6 1 7 5 9 8 3 7 4 3 3 9 1 9 1 7 3 4 4\n"," 7 1 4 1 6 8 7 3 9 7 8 6 3 8 3 4 2 8 8 4 8 6 9 4 6 3 4 0 5 2 9 6 7 0 4 3 6\n"," 6 4 2 1 6 7 2 9 2 7 6 7 2 6 0 4 8 4 6 1 4 6 3 2 4 6 5 8 2 8 3 9 9 3 9 6 0\n"," 8 1 9 4 4 5 4 1 6 7 8 6 4 3 2 4 7 1 8 7 4 4 1 4 7 8 4 6 4 2 3 2 6 1 4 0 3\n"," 1 1 8 8 8 5 1 1 5 1 2 9 1 0 1 6 8 5 5 7 8 7 7 6 4 1 1 6 8 7 6 2 0 9 3 2 5\n"," 2 4 4 2 3 2 1 7 3 1 0 1 3 7 2 2 9 2 3 8 3 8 3 0 2 3 9 5 2 1 5 5 6 0 0 7 0\n"," 7 5 2 1 6 9 7 3 0 0 5 8 7 1 6 9 4 9 8 9 7 9 9 1 4 0 4 6 8 0 1 8 4 7 9 6 2\n"," 9 4 9 7 7 7 0 6 9 1 5 2 9 2 7 0 0 9 7 4 4 2 5 5 0 7 8 2 2 7 8 7 3 1 3 3 3\n"," 9 1 3 1 8 8 9 5 7 4 7 3 6 6 3 6 3 5 2 1 2 0 2 2 1 0 7 2 6 6 0 5 3 4 7 6 0\n"," 9 7 5 1 2 9 9 5 0 8 1 5 7 7 2 9 3 3 7 7 2 6 0 0 0 5 9 9 3 3 7 5 1 2 8 8 4\n"," 1 7 5 4 7 6 3 5 6 8 7 3 0 7 6 2 0 1 3 8 8 1 8 8 3 3 6 6 9 5 8 4 0 5 8 9 2\n"," 6 6 5 5 0 6 9 8 6 7 3 5 9 2 1 1 3 2 8 8 7 4 1 7 5 9 7 4 3 5 3 4 2 0 7 3 2\n"," 1 1 1 4 2 7 2 3 6 6 1 1 8 2 3 2 3 2 4 4 0 0 6 6 3 8 9 6 5 2 5 7 6 2 4 7 2\n"," 9 5 2 8 2 1 3 3 1 3 1 6 6 1 4 0 6 8 7 5 5 5 1 1 6 4 9 0 1 4 4 7 5 2 6 8 4\n"," 8 0 9 1 1 3 5 5 7 3 9 0 2 9 1 0 1 9 7 4 6 5 3 2 3 6 4 9 6 3 7 2 7 9 0 1 2\n"," 0 7 3 3 0 7 6 4 3 7 4 3 0 3 8 9 4 2 6 3 0 5 2 8 5 3 5 0 0 6 5 7 7 6 2 8 2\n"," 6 1 2 4 0 6 9 9 3 2 3 3 3 8 1 8 0 2 3 3 8 7 3 4 1 6 6 3 6 5 5 4 7 7 3 1 0\n"," 7 8 1 9 0 4 6 6 7 9 3 5 8 3 5 9 3 1 7 8 9 7 0 0 6 5 6 7 6 6 3 7 5 7 4 8 7\n"," 0 7 0 8 7 9 7 3 5 9 9 2 3 9 6 0 0 6 5 0 4 7 2 0 4 3 0 2 3 2 5 5 5 0 0 5 5\n"," 1 8 9 8 6 5 9 4 1 5 6 1 7 7 3 5 6 4 2 3 1 1 8 3 3 9 6 3 8 6 5 3 6 7 9 0 1\n"," 8]\n"]},{"output_type":"execute_result","data":{"text/plain":["0.889"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":[],"metadata":{"id":"oRvEKxA4FFZL"},"execution_count":null,"outputs":[]}]}